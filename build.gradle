import org.springframework.boot.gradle.run.BootRunTask

buildscript {
  ext {
    springBootVersion = '1.5.3.RELEASE'
  }

  repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
  }

  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
  }
}

plugins {
  id "com.jfrog.bintray" version "1.7.3"
}

ext {
  versionSuffix = project.hasProperty('release') ? '' : '-SNAPSHOT'
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven' //providing install task
apply plugin: 'maven-publish'

group 'com.diyanfilipov'
version '0.0.5' + (project.versionSuffix as String)

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
  maven { url "https://repo.spring.io/snapshot" }
  maven { url "https://repo.spring.io/milestone" }
}

configurations {
  providedRuntime
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

bootRepackage {
  mainClass = 'com.diyanfilipov.main.MainApp'
}

sourceSets {
  main.groovy.srcDirs = ['src/main/groovy']
  main.resources.srcDirs = ['src/main/resources']

  integrationTest {
    compileClasspath += main.output
    runtimeClasspath += main.output
  }

  integrationTestInMemory {
    compileClasspath += main.output
    runtimeClasspath += main.output
  }

  integrationTest.groovy.srcDirs = ['src/test/integration/groovy']
  integrationTest.resources.srcDirs = ['src/test/integration/resources']

}

dependencies {

  integrationTestCompile sourceSets.main.output
  integrationTestCompile sourceSets.test.output
  integrationTestCompile configurations.testCompile
  integrationTestRuntime configurations.testRuntime

  compile 'com.typesafe:config:1.3.1'
  compile 'org.codehaus.groovy:groovy-all:2.4.3'

  // ################# SPRING ##################################
  compile 'org.springframework.boot:spring-boot-starter-data-jpa'
  compile 'org.springframework.boot:spring-boot-starter-jersey'
  compile 'org.springframework.boot:spring-boot-starter-security'
  compile 'org.springframework.boot:spring-boot-starter-validation'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.security.oauth:spring-security-oauth2'
  compile 'org.springframework.session:spring-session'

  // ################# DEPENDENCIES #############################
  compile 'joda-time:joda-time:2.9.9'
  compile 'c3p0:c3p0:0.9.1.2'
  compile 'org.springframework.boot:spring-boot-configuration-processor'
  compile 'org.liquibase:liquibase-core:3.5.3'
  compile 'commons-lang:commons-lang:2.6'
  compile 'org.jadira.usertype:usertype.core:5.0.0.GA'

  // to map Entities with JodaTime to JSON
  compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.8.8'
  compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda'

  runtime 'com.h2database:h2:1.4.195'
  runtime 'mysql:mysql-connector-java:5.1.6'
  providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

  testCompile 'junit:junit:4.12'
  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
  testCompile 'org.assertj:assertj-core:3.8.0'

  integrationTestCompile('org.springframework.boot:spring-boot-starter-test')
  integrationTestCompile('org.assertj:assertj-core:3.8.0')
}

bintray {
  user = project.hasProperty('bintray.username') ? project.property('bintray.username') : System.getenv('BINTRAY_USERNAME')
  key = project.hasProperty('bintray.secret') ? project.property('bintray.secret') : System.getenv('BINTRAY_API_KEY')
  configurations = ['archives']
  pkg {
    repo = 'dfartefactory'
    name = project.name
    userOrg = 'diyanfilipov'
    licenses = ['Apache-2.0']
    vcsUrl = 'https://github.com/diyanfilipov/spring-boot-hocon-tomcat.git'
    version {
      vcsTag = project.name
      name = project.version
    }
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  from javadoc.destinationDir
  classifier = 'javadoc'
}

jar {
  baseName = project.name
  version = project.version
  from(sourceSets.getByName('integrationTest').output)
  dependsOn sourcesJar
  dependsOn javadocJar
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

task integrationTest(type: Test, group: LifecycleBasePlugin.VERIFICATION_GROUP) {
  mustRunAfter test
  testClassesDir = sourceSets.getByName('integrationTest').output.classesDir
  classpath = sourceSets.getByName('integrationTest').runtimeClasspath

  reports.html.destination = new File(project.buildDir, 'reports/tests/integration')
  reports.junitXml.destination = new File(project.buildDir, 'test-results/integration')

  systemProperties['user.dir'] = project.projectDir.toString()
  systemProperties['user.timezone'] = 'UTC'
  outputs.upToDateWhen { false }
  jvmArgs('-XX:MaxPermSize=128m')
  if (System.getProperty('DEBUG', 'false') == 'true') {
    jvmArgs('-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005')
  }

  useJUnit {
    excludeCategories 'com.diyanfilipov.IntegrationTestInMemory'
  }
}

task integrationTestInMemory(type: Test, group: LifecycleBasePlugin.VERIFICATION_GROUP) {
  doFirst {
    systemProperties['spring.profiles.active'] = 'test'
  }

  mustRunAfter test

  testClassesDir = sourceSets.getByName('integrationTest').output.classesDir
  classpath = sourceSets.getByName('integrationTest').runtimeClasspath

  reports.html.destination = new File(project.buildDir, 'reports/tests/integration')
  reports.junitXml.destination = new File(project.buildDir, 'test-results/integration')

  systemProperties['user.dir'] = project.projectDir.toString()
  systemProperties['user.timezone'] = 'UTC'
  outputs.upToDateWhen { false }
  jvmArgs('-XX:MaxPermSize=128m')
  if (System.getProperty('DEBUG', 'false') == 'true') {
    jvmArgs('-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005')
  }

  useJUnit {
    includeCategories 'com.diyanfilipov.IntegrationTestInMemory'
  }
}

task runDev(type: BootRunTask) {
  description = 'Runs this project as a JVM application'
  doFirst {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    systemProperty 'spring.profiles.active', 'dev'
    jvmArgs '-XX:MaxPermSize=128m', '-Xverify:none'
  }
}

task runInMemory(type: BootRunTask) {
  description = 'Runs this project as a JVM application with an in-memory DB'
  doFirst {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    systemProperty 'spring.profiles.active', 'test'
    jvmArgs '-XX:MaxPermSize=128m', '-Xverify:none'
  }
}

install {
  description = 'Installs the artefact in the local Maven repo'
  doLast {
    def pom = (install.repositories
      .findByName(MavenRepositoryHandlerConvention.DEFAULT_MAVEN_INSTALLER_NAME) as GroovyMavenDeployer)?.pom

    if (pom) {
      logger.lifecycle("Installed ${pom.groupId}:${pom.artifactId}:${pom.version}")
    }
  }
}


check.dependsOn integrationTestInMemory

task wrapper(type: Wrapper) {
  gradleVersion = '3.5'
}


